/*
    User Prompt:
    Create a complete HTML5 page named basic.html. Add a centered <h1> heading and a short <p> paragraph. Link to an external CSS file (css/basic.css)
    that sets the background color to white and the text color to black.
    Write neurotically detailed comments in all files; explain every tag,
    class, style rule, and color value as if you're walking a complete
    beginner through the reasoning behind each choice. Be sure to include
    named comments describing your color scheme and interaction behavior.
    Include this full prompt as a comment at the top of the HTML file. Use
    placeholder content about an art topic of your choice to complete the
    page.
*/

/*
    ### Named Comment: Color Scheme
    This CSS file defines a simple, high-contrast color scheme for the web page:
    - Background Color: White (#FFFFFF)
    - Text Color: Black (#000000)
    This choice ensures maximum readability and a clean, professional aesthetic.

    ### Named Comment: Interaction Behavior
    This stylesheet primarily focuses on static presentation. There are no
    CSS rules here that define interactive behaviors (like hover effects,
    active states for buttons, or animations triggered by user input).
    The styling is purely for the visual layout and appearance of the content.
*/

body {
    /*
        The 'body' selector targets the <body> element of the HTML document.
        This means any styles applied here will affect the entire visible
        content area of the web page.
    */
    background-color: #FFFFFF;
    /*
        'background-color' is a CSS property that sets the background color of an element.
        - '#FFFFFF' is a hexadecimal color code. 'FF' for Red, 'FF' for Green, 'FF' for Blue.
          Each pair ranges from 00 (least intense) to FF (most intense).
          #FFFFFF represents pure white, as all color channels are at their maximum intensity.
          This makes the entire page background white, providing a clean canvas.
    */
    color: #000000;
    /*
        'color' is a CSS property that sets the foreground color of an element's text content.
        - '#000000' is a hexadecimal color code. '00' for Red, '00' for Green, '00' for Blue.
          This represents pure black, as all color channels are at their minimum intensity.
          This ensures the text is starkly visible against the white background,
          optimizing readability.
    */
    font-family: 'Inter', sans-serif;
    /*
        'font-family' specifies the typeface to be used for the text.
        - 'Inter': This is the primary font choice. It's a modern, highly readable
          font often used for UI design.
        - 'sans-serif': This is a generic font family. It acts as a fallback.
          If 'Inter' is not available on the user's system, the browser will
          choose a generic sans-serif font (like Arial, Helvetica, or similar)
          to ensure the text is still displayed in a clear, modern style without
          decorative serifs (the small lines at the ends of characters).
          It's good practice to always include a generic font family as a fallback.
    */
    margin: 0;
    /*
        'margin' is a shorthand property that sets the margin area on all four sides of an element.
        - '0': Setting margin to 0 removes any default outer spacing that browsers
          might apply to the <body> element. This ensures the content starts
          right at the edge of the viewport, giving us full control over spacing.
    */
    padding: 20px;
    /*
        'padding' is a shorthand property that sets the padding area on all four sides of an element.
        - '20px': This adds 20 pixels of inner spacing (padding) between the content
          of the <body> element and its edges. This creates a visual buffer around
          the main content, preventing it from touching the very edges of the browser window
          and making it more aesthetically pleasing and readable.
    */
    display: flex;
    /*
        'display: flex;' turns the <body> element into a flex container.
        Flexbox is a one-dimensional layout method for arranging items in rows or columns.
        By making the body a flex container, we can easily control the alignment
        of its direct children (header, main, footer).
    */
    flex-direction: column;
    /*
        'flex-direction: column;' arranges the flex items (children of the body)
        in a vertical column, from top to bottom. This is standard for a web page
        layout where content stacks vertically.
    */
    min-height: 100vh;
    /*
        'min-height: 100vh;' sets the minimum height of the <body> element to 100%
        of the viewport height ('vh' stands for viewport height).
        This ensures that the body always occupies at least the full height of the
        browser window, even if the content is short. This is useful for
        making footers stick to the bottom or for full-page layouts.
    */
    align-items: center;
    /*
        'align-items: center;' aligns flex items along the cross-axis (perpendicular
        to the flex-direction). Since 'flex-direction' is 'column', the cross-axis
        is horizontal. So, this centers the children (header, main, footer) horizontally
        within the <body> element.
    */
    justify-content: center;
    /*
        'justify-content: center;' aligns flex items along the main-axis (the direction
        of 'flex-direction'). Since 'flex-direction' is 'column', the main-axis is vertical.
        This centers the children (header, main, footer) vertically within the <body> element.
        For a typical page, this might push content down if it's very short, but for
        this specific design, it helps ensure the overall block of content is centered.
    */
    text-align: center;
    /*
        'text-align: center;' is a CSS property that horizontally aligns the inline-level
        content (like text, images, or inline-block elements) inside a block-level element.
        By applying it to the <body>, it will center all text within the body by default,
        unless overridden by a more specific rule. This is a general centering mechanism
        for text.
    */
}

.centered-text {
    /*
        The '.centered-text' selector targets any HTML element that has the
        'class="centered-text"' attribute. This is a custom class we created
        in the HTML to apply specific styles to multiple elements.
    */
    text-align: center;
    /*
        'text-align: center;' horizontally aligns the inline-level content (text)
        within the elements that have this class.
        We apply this explicitly to the <h1> and <p> tags in the HTML to ensure
        they are centered, even though the 'body' also has 'text-align: center'.
        This provides redundancy and clarity in our styling intent for these specific elements.
    */
    max-width: 800px;
    /*
        'max-width' sets the maximum width an element can have.
        - '800px': This means the element (in this case, the h1 and p tags)
          will not be wider than 800 pixels. If the screen is narrower than 800px,
          the element will shrink to fit. This prevents very long lines of text
          on large screens, which can be hard to read, and helps maintain
          readability and a pleasant layout.
    */
    margin-left: auto;
    /*
        'margin-left: auto;' combined with 'margin-right: auto;' is a common
        technique to horizontally center a block-level element when it has a defined width
        (or max-width). The 'auto' value tells the browser to distribute available
        horizontal space equally on both sides.
    */
    margin-right: auto;
    /*
        See 'margin-left: auto;' explanation above. Together, these two properties
        center the block-level elements that have the 'centered-text' class.
    */
    padding: 10px 0;
    /*
        'padding' is a shorthand property for setting padding on all four sides.
        - '10px 0': This means 10 pixels of padding on the top and bottom,
          and 0 pixels of padding on the left and right.
          This adds a little vertical breathing room around the heading and paragraph,
          separating them slightly from other content or the page edges.
    */
}

h1 {
    /*
        The 'h1' selector targets all <h1> elements in the HTML document.
    */
    font-size: 2.5em;
    /*
        'font-size' sets the size of the font.
        - '2.5em': 'em' is a relative unit of measurement. '1em' is equal to the
          current font-size of the element's parent. If the default font size
          is 16px, then 2.5em would be 2.5 * 16px = 40px. Using 'em' units
          makes the text scale proportionally if the user changes their browser's
          default font size, which is good for accessibility.
          This makes the main heading significantly larger than the body text.
    */
    margin-bottom: 20px;
    /*
        'margin-bottom' sets the margin area on the bottom of an element.
        - '20px': This adds 20 pixels of space below the <h1> heading,
          creating a clear visual separation between the heading and the
          paragraph that follows it.
    */
}

p {
    /*
        The 'p' selector targets all <p> (paragraph) elements in the HTML document.
    */
    font-size: 1.1em;
    /*
        'font-size' sets the size of the font for paragraphs.
        - '1.1em': This makes the paragraph text slightly larger than the browser's
          default font size, improving readability, especially on larger screens.
    */
    line-height: 1.6;
    /*
        'line-height' sets the height of a line of text.
        - '1.6': This is a unitless value, which is generally recommended for line-height.
          It means the line height will be 1.6 times the element's font size.
          For example, if font-size is 16px, line-height will be 16 * 1.6 = 25.6px.
          This adds more vertical space between lines of text within a paragraph,
          significantly improving readability by preventing lines from appearing
          too cramped together.
    */
}

/*
    Media Queries for Responsiveness:
    These rules ensure the page looks good on different screen sizes.
*/

@media (max-width: 768px) {
    /*
        '@media (max-width: 768px)' is a media query. It means the styles inside
        this block will only be applied when the viewport (browser window) width
        is 768 pixels or less. This is a common breakpoint for tablets and smaller screens.
    */
    h1 {
        font-size: 2em;
        /*
            For smaller screens, we reduce the font size of the <h1> heading to 2em.
            This prevents the heading from appearing too large and taking up too much
            vertical space on smaller devices, ensuring a better fit.
        */
    }

    p {
        font-size: 1em;
        /*
            For smaller screens, we reduce the font size of the <p> paragraphs to 1em.
            This ensures the text remains readable but doesn't become excessively large,
            which can happen if it scales up too much on very small screens.
        */
    }

    body {
        padding: 15px;
        /*
            We slightly reduce the overall padding around the body content for smaller screens.
            This gives a bit more horizontal space for the content on narrower viewports.
        */
    }
}

@media (max-width: 480px) {
    /*
        '@media (max-width: 480px)' is another media query, targeting even smaller screens,
        typically smartphones in portrait mode. Styles here apply when the viewport width
        is 480 pixels or less.
    */
    h1 {
        font-size: 1.8em;
        /*
            For very small screens, we further reduce the <h1> font size to 1.8em.
            This is to ensure the heading fits comfortably on narrow phone screens
            without wrapping awkwardly or overflowing.
        */
    }

    p {
        font-size: 0.95em;
        /*
            For very small screens, we slightly reduce the <p> font size to 0.95em.
            This ensures the text remains compact and readable on the smallest displays.
        */
    }

    body {
        padding: 10px;
        /*
            For the smallest screens, we reduce the body padding even further to 10px.
            This maximizes the content area on very narrow devices, making the most
            of the limited screen real estate.
        */
    }
}
